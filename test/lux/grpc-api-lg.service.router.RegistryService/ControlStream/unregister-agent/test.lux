[doc]
Check if router handles agent unregistration properly.
[enddoc]

[include ${ROUTER_DIR_TESTS_LUX}/__common/capture.luxinc]
[include ${ROUTER_DIR_TESTS_LUX}/__common/common.luxinc]
[include ${ROUTER_DIR_TESTS_LUX}/__common/grpc.luxinc]
[include ${ROUTER_DIR_TESTS_LUX}/__common/jq.luxinc]
[include ${ROUTER_DIR_TESTS_LUX}/__router/registry-service.luxinc]

[global request-file-init-1=json/init-request-1.json]
[global request-file-register-agent-1=json/register-agent-request-1.json]
[global request-file-unregister-agent-1=json/unregister-agent-request-1.json]
[global request-file-init-2=json/init-request-2.json]
[global request-file-register-agent-2=json/register-agent-request-2.json]

[shell router]
  [invoke app-start]

## Register first agent

[shell control-stream-1]
  [progress (init-1)]
  [invoke grpcc-start ${grpc-service-name} ${grpc-method-control-stream} json ""]
  [invoke grpcc-conn-up]
  [invoke grpcc-prompt]
  [invoke grpcc-send-data ${request-file-init-1}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-headers]
  [global headers=${out}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-data]
  [global data=${out}]
  [invoke grpcc-prompt]

[shell jq-check-1]
  [progress (check response)]
  [invoke jq-check-file-match ${headers} .headers.\"content-type\" "application/grpc+proto"]
  [invoke jq-check-file-match ${headers} .headers.\"grpc-user-agent\" "router/"]
  [invoke jq-check-file-match ${headers} .status 200]
  [invoke jq-check-file-match ${data} .id.tag "init-1"]
  [invoke jq-check-file-match ${data} .event.init_rs.result.status SUCCESS]
  [invoke jq-check-file ${data} .event.init_rs.session_id]
  ?^(${capture-uuid})$
  [global session-id=$1]
  [invoke check-ok]
  [progress (session id ${session-id})]

[shell control-stream-1]
  [progress (register agent-1)]
  [invoke grpcc-send-data ${request-file-register-agent-1}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-data]
  [global data=${out}]
  [invoke grpcc-prompt]

[shell jq-check-1]
  [progress (check response)]
  [invoke jq-check-file-match ${headers} .headers.\"content-type\" "application/grpc+proto"]
  [invoke jq-check-file-match ${headers} .headers.\"grpc-user-agent\" "router/"]
  [invoke jq-check-file-match ${headers} .status 200]
  [invoke jq-check-file-match ${data} .id.tag "register-agent-1"]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.result.status SUCCESS]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.agent_id "agent-1"]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.agent_instance "agent-1"]

## Try to register second agent

[shell control-stream-2]
  [progress (init-2)]
  [invoke grpcc-start ${grpc-service-name} ${grpc-method-control-stream} json ""]
  [invoke grpcc-conn-up]
  [invoke grpcc-prompt]
  [invoke grpcc-send-data ${request-file-init-2}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-headers]
  [global headers=${out}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-data]
  [global data=${out}]
  [invoke grpcc-prompt]

[shell jq-check-2]
  [progress (check response)]
  [invoke jq-check-file-match ${headers} .headers.\"content-type\" "application/grpc+proto"]
  [invoke jq-check-file-match ${headers} .headers.\"grpc-user-agent\" "router/"]
  [invoke jq-check-file-match ${headers} .status 200]
  [invoke jq-check-file-match ${data} .id.tag "init-2"]
  [invoke jq-check-file-match ${data} .event.init_rs.result.status SUCCESS]
  [invoke jq-check-file ${data} .event.init_rs.session_id]
  ?^(${capture-uuid})$
  [global session-id=$1]
  [invoke check-ok]
  [progress (session id ${session-id})]

[shell control-stream-2]
  [progress (register agent-2)]
  [invoke grpcc-send-data ${request-file-register-agent-2}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-data]
  [global data=${out}]
  [invoke grpcc-prompt]

[shell jq-check-2]
  [progress (check response)]
  [invoke jq-check-file-match ${data} .id.tag "register-agent-2"]
  [invoke jq-check-file-empty ${data} .event.register_agent_rs.agent_id]
  [invoke jq-check-file-empty ${data} .event.register_agent_rs.agent_instance]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.result.status ERROR_CONFLICT]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.result.error_message "Cannot register agent due to conflict management policy: blocking"]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.result.error_meta.conflict "Agent agent-1@lg.test.package.StatefulService/agent-1 is already registered in the system and the conflict management policy is set to 'BLOCKING'"]

## Unregister first agent

[shell control-stream-1]
  [progress (unregister agent-1)]
  [invoke grpcc-send-data ${request-file-unregister-agent-1}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-data]
  [global data=${out}]
  [invoke grpcc-prompt]

[shell jq-check-1]
  [progress (check response)]
  [invoke jq-check-file-match ${headers} .headers.\"content-type\" "application/grpc+proto"]
  [invoke jq-check-file-match ${headers} .headers.\"grpc-user-agent\" "router/"]
  [invoke jq-check-file-match ${headers} .status 200]
  [invoke jq-check-file-match ${data} .id.tag "unregister-agent-1"]
  [invoke jq-check-file-match ${data} .event.unregister_agent_rs.result.status SUCCESS]

## Register second agent

[shell control-stream-2]
  [progress (register agent-2)]
  [invoke grpcc-send-data ${request-file-register-agent-2}]
  [invoke grpcc-prompt]
  [invoke grpcc-recv-data]
  [global data=${out}]
  [invoke grpcc-prompt]

[shell jq-check-2]
  [progress (check response)]
  [invoke jq-check-file-match ${data} .id.tag "register-agent-2"]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.result.status SUCCESS]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.agent_id "agent-1"]
  [invoke jq-check-file-match ${data} .event.register_agent_rs.agent_instance "agent-1"]

[cleanup]
