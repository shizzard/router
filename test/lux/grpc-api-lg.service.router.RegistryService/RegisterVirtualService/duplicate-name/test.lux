[doc]
Check if router accepts two gRPC virtual service registrations with the same names and different endpoints.
[enddoc]

[include ${ROUTER_DIR_TESTS_LUX}/__common/common.luxinc]
[include ${ROUTER_DIR_TESTS_LUX}/__common/grpc.luxinc]
[include ${ROUTER_DIR_TESTS_LUX}/__common/jq.luxinc]
[include ${ROUTER_DIR_TESTS_LUX}/__router/registry-service.luxinc]

[global request-file-first-register=json/first-service-request.json]
[global request-file-second-register=json/second-service-request.json]
[global request-file-list=json/list-request.json]

[shell router]
  [invoke app-start]

[shell first-service]
  [progress (register first service)]
  [invoke grpcc-start-unary ${grpc-service-name} ${grpc-method-register-virtual-service} json "" ${request-file-first-register}]
  [progress (check response)]
  [invoke jq-check-file-match ${headers} .headers.\"content-type\" "application/grpc+proto"]
  [invoke jq-check-file-match ${headers} .headers.\"grpc-user-agent\" "router/"]
  [invoke jq-check-file-match ${headers} .status 200]
  [invoke jq-check-file-match ${data} . "{}"]
  [invoke jq-check-file-match ${trailers} .trailers.\"grpc-status\" 0]
  [invoke jq-check-file-empty ${trailers} .trailers.\"grpc-message\"]

[shell second-service]
  [progress (register second service)]
  [invoke grpcc-start-unary ${grpc-service-name} ${grpc-method-register-virtual-service} json "" ${request-file-second-register}]
  [progress (check response)]
  [invoke jq-check-file-match ${headers} .headers.\"content-type\" "application/grpc+proto"]
  [invoke jq-check-file-match ${headers} .headers.\"grpc-user-agent\" "router/"]
  [invoke jq-check-file-match ${headers} .status 200]
  [invoke jq-check-file-match ${data} . "{}"]
  [invoke jq-check-file-match ${trailers} .trailers.\"grpc-status\" 0]
  [invoke jq-check-file-empty ${trailers} .trailers.\"grpc-message\"]

[shell list]
  [progress (list)]
  [invoke grpcc-start-unary ${grpc-service-name} ${grpc-method-list-virtual-services} "json" "" ${request-file-list}]
  [progress (check response)]
  [invoke jq-check-file-match ${headers} .headers.\"content-type\" "application/grpc+proto"]
  [invoke jq-check-file-match ${headers} .headers.\"grpc-user-agent\" "router/"]
  [invoke jq-check-file-match ${headers} .status 200]
  [invoke jq-check-file-match ${data} .services[0].service.stateless.package lg.test.package]
  [invoke jq-check-file-match ${data} .services[0].service.stateless.name StatelessService]
  [invoke jq-check-file-match ${data} .services[0].service.stateless.methods[0].name MethodOne]
  [invoke jq-check-file-match ${data} .services[0].endpoint.host "test-1.lg"]
  [invoke jq-check-file-match ${data} .services[0].endpoint.port 8137]
  [invoke jq-check-file-match ${data} .services[1].service.stateless.package lg.test.package]
  [invoke jq-check-file-match ${data} .services[1].service.stateless.name StatelessService]
  [invoke jq-check-file-match ${data} .services[1].service.stateless.methods[0].name MethodOne]
  [invoke jq-check-file-match ${data} .services[1].endpoint.host "test-2.lg"]
  [invoke jq-check-file-match ${data} .services[1].endpoint.port 8137]
  [invoke jq-check-file-match ${trailers} .trailers.\"grpc-status\" 0]
  [invoke jq-check-file-empty ${trailers} .trailers.\"grpc-message\"]

[cleanup]
